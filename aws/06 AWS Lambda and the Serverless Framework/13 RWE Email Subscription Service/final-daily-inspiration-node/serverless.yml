service: final-daily-inspiration-node
frameworkVersion: "3"

custom:
  tableName: "users-table-${sls:stage}"
  region: ${self:provider.region}

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  profile: serverless-admin
  stage: dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action: SNS:Publish
          Resource: !Ref QuotesMessages
        - Effect: Allow
          Action: "s3:*"
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
  environment:
    USERS_TABLE: ${self:custom.tableName}
    REGION: ${self:provider.region}
    SNS_TOPIC_ARN: "arn:aws:sns:us-east-1:079366237922:quotes-messages-dev"
    SENDGRID_API_KEY: "SG.XXX"

functions:
  quotes:
    handler: handler/getQuotes.getQuotes
    events:
      - http:
          path: quotes
          method: get
          cors: true

  subscribe:
    handler: handler/subscribeUser.subscribeUser
    events:
      - http:
          path: subscribe
          method: post
          cors: true

  staticMailer:
    handler: handler/staticMailer.staticMailer
    events:
      - http:
          path: static-mailer
          method: post
          cors: true

  sendEmail:
    handler: handler/sendEmail.sendEmail
    events:
      - http:
          path: sendEmail
          method: post
          cors: true
          #Fire at 1 PM every day UTC (9 am EST) - cron examples: https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm
      #https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
      - schedule: cron(0 13 * * ? *)

  getSubscribers:
    handler: handler/getSubscribers.getSubscribers
    events:
      - http:
          path: getSubscribers
          method: get
          cors: true

resources:
  Resources:
    #SNS
    QuotesMessages:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: quotes-messages-${self:provider.stage}

    QuotesMessagesSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref QuotesMessages
        Protocol: email
        Endpoint: isaac220199@gmail.com
        DeliveryPolicy:
          healthyRetryPolicy:
            numRetries: 20
            minDelayTarget: 30
            maxDelayTarget: 600
            backoffFunction: exponential

    # DynamoDb Table
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
